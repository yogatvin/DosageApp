# -*- coding: utf-8 -*-
"""
Created on Tue Apr 11 23:37:01 2023

@author: Hajar
"""


import matplotlib.pyplot as plt
import streamlit as st
import pandas as pd
import plotly.express as px

# Liste von Benutzername-Passwort-Paaren
USERS = [
    {"username": "zhaw", "password": "123"},
]

 

def login():
    st.title("Login")
    username = st.text_input("Benutzername")
    password = st.text_input("Passwort", type="password")
    login_button = st.button("Einloggen")

 

    if login_button:
        for user in USERS:
            if username == user["username"] and password == user["password"]:
                st.success("Erfolgreich eingeloggt!")
                st.session_state.authenticated = True
                main()
                return

 

        st.error("Ung√ºltiger Benutzername oder Passwort!")
    
    

def page_home():
    image_url = "https://media.istockphoto.com/id/949119664/vector/cute-white-doctor-robot-modern-health-care-flat-editable-vector-illustration-clip-art.jpg?s=170667a&w=0&k=20&c=EMq4RjpMf12KPNpp7hbyU8i663LaYbcooGQpbvRuXSI="
    st.markdown("<h1 style='color: skyblue; font-weight: bold; font-family: Wide;'>DosageAid üíä</h1>", unsafe_allow_html=True)
    st.write('Herzlich Willkommen zur Medikamentendosierungs-App! Hier finden Sie alle Werkzeuge, die Sie ben√∂tigen, um Ihre Medikamentendosierung genau zu planen und im Blick zu behalten.')
    st.write('Wir hoffen, dass Ihnen unsere App dabei helfen wird, Ihre Medikamentendosierung auf einfache und effektive Weise zu optimieren. Vielen Dank, dass Sie sich f√ºr unsere App entschieden haben!')
    st.image(image_url, width=500)
    st.write('Vielen Dank, dass Sie uns Vertrauen.')
    st.caption(':Blue[Herzlichst: Vinitha Yogathas, Anashai Anandaruban, Hajar Maanaoui]')
    
    st.balloons()
    

    
def page_medlist():
    st.header(':orange[Medikamentenliste]')
    st.write('Sie k√∂nnen hier Ihre Einnahmezeiten ausw√§hlen und die App erkennt automatisch, welches Medikament zu welcher Zeit eingenommen wurde. Nur mit ein paar Klicks kann eine √úbersicht erschaffen werden!.')
    # Erstellen des DataFrames mit 4 Spalten und 4 Zeilen
    data = {
    'Medikamente üíä': ['Aspirin Cardio 100 mg', 'Metformin 500 mg', 'Atorvastatin 20 mg', 'Zolpidem 5 mg'],
    'Einnahme ‚è≥': ['Morgens', 'Morgens/Abends', 'Abends', 'Nachts'],
    'Dosierung': ['1 Tablette', 'Je 1 Tablette', '1 Tablette', '1/2 - max. 1 Tablette'],
    'Kontrolle': [False, False, False, False]
}
    df = pd.DataFrame(data)


# Checkbox-Men√º f√ºr die Spalte "Kontrolle" erstellen
    selected_rows = st.multiselect('Kontrolle', df["Medikamente üíä"].tolist())

 

# Markiere ausgew√§hlte Einnahmen in der DataFrame als "done"
    for einnahme in selected_rows:
        df.loc[df["Einnahme ‚è≥"] == einnahme, 'Kontrolle'] = True

 

    st.write(df)

    st.subheader('Information ‚ÑπÔ∏è')
    st.write('Nun k√∂nnen sie bei "Choose an Option" ihre Einnahmezeit anw√§hlen, somit wird das eingenommene Medikament mit ‚òëÔ∏è angezeigt.')

def page_meds():

    st.header("Hier finden Sie weitere Informationen zu den Medikamenten")
    st.write('Das Compendium ist einen umfassende Online-Datenbank f√ºr medizinische Informationen. Es bietet detaillierte Informationen zu Medikamenten, Krankheiten und Therapien f√ºr Fachleute und Patienten. Das Compendium wird regelm√§ssig aktualisiert und erm√∂glicht gezielte Suche nach relevanten Informationen. Es unterst√ºtzt fundierte Entscheidungen und informierte Diskussionen im Gesundheitswesen. Nebenbei finden Sie auch den SL-Preis, der f√ºr die Krankenkasse relevant ist. Dieser Preis kann Ihnen dabei helfen, die Kosten des Medikaments abzusch√§tzen.')
    st.write('Klicken Sie auf den Link ‚Äûcompendium.ch", um das entsprechende Verzeichnis zu √∂ffnen.')
    url = "https://compendium.ch"
    link_name = "Compendium"
    st.markdown(f"[{link_name}]({url})")
    
   
def page_numbers():
    st.header("‚òéÔ∏è Wichtige Telefonnummern!")
    st.write("Haben Sie Beschwerden? Wurde ein Medikament vergessen oder falsch eingenommen? Z√∂gern Sie nicht anzurufen!")
    st.write("Speichern Sie diese Telefonnummern f√ºr den Fall von Notf√§llen, Vergiftungen und medizinischen Notf√§llen in Ihrem Mobiltelefon, um schnelle Hilfe zu erhalten. Diese Nummern bieten rasche Unterst√ºtzung und sind besonders wichtig in dringenden Situationen.")
    data = {'Kategorie': ['Allgemeiner Notruf', 'Vergiftungen', '√Ñrztlicher Notfalldienst', 'Psychiatrischer Notfalldienst'],
            'Telefonnummer': ['112', '145', '0800 33 66 55', '0800 333 444']}
    df = pd.DataFrame(data) 

    st.table(df)
    

# Funktion zum Anzeigen der Symptome auf der Seite
def page_symptoms():
        # Daten f√ºr die Tabelle
    data = {'Beschwerden': ['Kopfschmerzen', 'Bauchschmerzen', '√úbelkeit', 'Schwindel', 'Husten', 'Fieber'],
            'Zeitpunkt/H√§ufigkeit': ['1x t√§glich', '2x t√§glich', '3x t√§glich', 'Mehr als 3x t√§glich', '2x t√§glich', '1x t√§glich']}
    
    # DataFrame erstellen
    df = pd.DataFrame(data)
    
    # Titel und Beschreibung
    st.write('# ‚ö†Ô∏è Sind Besondere Symptome aufgetreten?')
    st.write('Haben Sie Ver√§nderungen bemerkt? Treten H√§ufiger Symptome auf? Bitte tragen sie es ein und nehmen sie es mit f√ºr Ihre n√§chste Arztkonsultation.')
    
    # Tabelle anzeigen
    st.write(df)
        
    

    selected_symptoms = st.multiselect('Symptome', data['Beschwerden'])
    if len(selected_symptoms) > 0:
        df = pd.DataFrame({
            'Symptome': selected_symptoms,
            'Zeitpunkt/H√§ufigkeit': [data['Zeitpunkt/H√§ufigkeit'][data['Beschwerden'].index(symptom)] for symptom in selected_symptoms]
        })
        st.write(df)
    else:
        st.write('Keine Symptome ausgew√§hlt.')

# Funktion zum Erstellen eines Plots auf der Seite
def page_plot():

#Daten Aus Excel-Tabelle

    # Datenstruktur erstellen
    data = {
        'Kategorie': ['Randomisiert', 'Keine Daten f√ºr prim√§re Endpunkte', 'Intention-to-treat Gruppe',
                      'Aus der Studie ausgeschieden', 'Wegen Nebenwirkungen', 'Fehlende Wirksamkeit',
                      'Andere Gr√ºnde'],
        'Kontinuierliche Zolpidem Einnahme': [388, 2, 386, 22, 13, 1, 8,],
        'Diskontinuierliche Zolpidem Einnahme': [408, 5, 403, 26, 16, 2, 8,]
    }
    
    # DataFrame erstellen
    df = pd.DataFrame(data)
    
    # Titel und Beschreibung
    st.headers('Information √ºber Zolpidem ‚ÑπÔ∏è')
    st.write('Einnahme von Zolpidem')
    st.write('Diese Tabelle zeigt die Anzahl der Studienteilnehmer und welche aus unterschiedlichen Gr√ºnden ausgeschieden wurden. Studie aus Tellmed.ch')
    
    # Tabelle anzeigen
    st.table(df)
    
    # Horizontaler Balkendiagramm-Plot der Studienabbr√ºche
    fig = px.bar(df, x='Kategorie', y=['Kontinuierliche Zolpidem Einnahme'], 
                 title='Studie von Tellmed.ch',)
    fig.update_layout(barmode='stack')
    fig.update_yaxes(title="Persons")
    st.plotly_chart(fig)

    fig2 = px.bar(df, x='Kategorie', y=['Diskontinuierliche Zolpidem Einnahme'], 
                 title='Studie von Tellmed.ch',)
    fig2.update_layout(barmode='stack')
    fig2.update_yaxes(title="Persons")
    st.plotly_chart(fig)

    st.write('Tabelle aus Tellmed.ch')
    image_url ="https://www.tellmed.ch/show_image.php?file_id=576"
    st.image(image_url, width=500)
  
    #https://www.tellmed.ch/modules_end/printthis/?uniqueid=uniqueid&tip=2&popup=yes&mode=content_db&contentId=4854&lng=Lng1&thisMode=&clas_css=0&level_0=0   

def main():
    st.sidebar.title("Navigation")
    pages = {
        "Startseite": page_home,
        "Medikamentenliste": page_medlist,
        "Compendium": page_meds,
        "Wichtige Telefonnummern": page_numbers,
        "Ihre Symptome": page_symptoms,
        "Studie: Zolpidem": page_plot
    }

 

    if "authenticated" not in st.session_state:
        login()
    else:
        selection = st.sidebar.radio("Gehe zu", list(pages.keys()))
        page = pages[selection]
        page()

 

if __name__ == "__main__":
    main()










  
